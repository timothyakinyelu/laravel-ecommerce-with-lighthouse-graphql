type Category {
    id: ID! @globalId
    name: String!
    parent_id: Int
    slug: String
    description: String
    is_published: Boolean!
    category_image: String
    children: [Category!]! @hasMany
}

extend type Query {
    categories: [Category!]! @all
    # Fetch categories by parent_id
    parents(where: _ @whereConditions(columnsEnum: "ParentsWhereColumn")): [Category!]! @all

    # Fetch only categories where is_published is true
    published( where: _ @whereConditions(columnsEnum: "PublishedWhereColumn")): [Category!]! @all
}

input CategoryInput {
    name: String!
    parent_id: Int
    slug: String
    description: String
    is_published: Int!
    category_image: Upload
}

extend type Mutation {
    # Create new Category
    createCategory(category: CategoryInput! @spread): Category! @field(resolver: "CategoryMutator@create")

    # Update Category by id
    updateCategory(id: ID! @globalId(decode: "ID"), category: CategoryInput! @spread): Category! @update
    
    # Delete Category by id
    deleteCategory(id: ID! @globalId(decode: "ID")): Category! @delete(globalId: true)
}

# enums to filter lists by given value
enum ParentsWhereColumn {
  PARENT @enum(value: "parent_id")
}

enum PublishedWhereColumn {
  PUBLISHED @enum(value: "is_published")
}